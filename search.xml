<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git工作流</title>
    <url>/2022/12/01/Git%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[<p><img src="/2022/12/01/Git%E5%B7%A5%E4%BD%9C%E6%B5%81/git_flow.png"></p>
<h3 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a><strong>git基本命令</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* git config --global user.name &quot;&quot;</span><br><span class="line">* git config --global user.email ...</span><br><span class="line">* git status查看当前工作流状态</span><br><span class="line">* git log查看提交信息</span><br><span class="line">* git commit -a -m commit_name(-a执行git add) 直接从工作区跳到本地版本库</span><br><span class="line">为当前仓库新增文件，但是该文件还不能确定是否需要，可以在主分支中创建新分支</span><br><span class="line">* git branch branch_name 创建分支</span><br><span class="line">* git checkout branch_name 切换分支</span><br><span class="line">* git checkout -b 创建并切换分支</span><br><span class="line">* git branch -d branch_name 删除分支(不会立即删除，因为没有合并分支，非常确定要删除的时候可以使用 -D)</span><br><span class="line">* git merge branch_name(将分支合并到主分支)</span><br><span class="line">* git remote -v 查看本地仓库和哪些远程仓库有联系(默认用origin表示远程仓库的名字)</span><br><span class="line">* 使用github destop push速度更快</span><br></pre></td></tr></table></figure>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a><strong>Github</strong></h3><ul>
<li>PR  是一种通知机制。你修改了他人的代码，将你的修改通知原来的作者，希望他合并你的修改，这就是 Pull Request</li>
<li>actions 将持续集成过程变成了一个 actions 的组合</li>
</ul>
<h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a><strong>GitLab</strong></h3><ul>
<li>GitLab有完善的管理界面和权限控制，一般用于在企业、学校等内部网络搭建Git私服。</li>
<li>从代码的私有性上来看，GitLab 是一个更好的选择。但是对于开源项目而言，GitHub 依然是代码托管的首选。</li>
</ul>
<h3 id="GitBook"><a href="#GitBook" class="headerlink" title="GitBook"></a><strong>GitBook</strong></h3><p>(GitBook) 是一个使用 Git 和 Markdown 来构建书籍的工具。它可以将你的书输出很多格式：PDF，ePub，mobi，或者输出为静态网页。</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a><br><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a></p>
]]></content>
      <tags>
        <tag>git github gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Threejs</title>
    <url>/2022/12/05/Threejs/</url>
    <content><![CDATA[<p>Three.js是基于原生WebGL(Javascript的3D图形接口，把JavaScript和OpenGL ES 2.0结合在一起。)封装运行的三维引擎<br>三要素是：场景(Scene)、相机(Camera)、渲染器(Renderer),下面通过三要素在浏览器中创建几何体并显示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">// three.js最基本的创建流程</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">75</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="number">0.1</span>, <span class="number">1000</span>)</span><br><span class="line">camera.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">scene.<span class="title function_">add</span>(camera)</span><br><span class="line"><span class="keyword">const</span> cubeGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>()</span><br><span class="line"><span class="keyword">const</span> cubeMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0xffff00</span> &#125;)</span><br><span class="line"><span class="comment">//根据几何体和材质创建物体</span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(cubeGeometry,cubeMaterial)</span><br><span class="line"><span class="comment">//将几何体添加到场景中</span></span><br><span class="line">scene.<span class="title function_">add</span>(cube)</span><br><span class="line"><span class="comment">//初始化渲染器</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>()</span><br><span class="line"><span class="comment">//设置渲染的尺寸大小</span></span><br><span class="line">renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>)</span><br><span class="line"><span class="comment">//将webgl渲染的canvas内容添加到body</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>)</span><br><span class="line"><span class="comment">//使用渲染器，通过相机将场景渲染进来</span></span><br><span class="line">renderer.<span class="title function_">render</span>(scene,camera)</span><br></pre></td></tr></table></figure>
<p>threejs开源项目目录结构<br><img src="/2022/12/05/Threejs/threejs.png"></p>
<p>…后续补坑</p>
<p>References<br><a href="https://juejin.cn/post/7020396322062598181">https://juejin.cn/post/7020396322062598181</a></p>
]]></content>
      <tags>
        <tag>threejs 3d webgl</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>会删除public文件夹，执行hexo g会重新生成public文件夹(即网页html),由于我的avatar放在public中的images中，执行hexo clean之后我的logo就没了(呜呜呜) </p>
]]></content>
  </entry>
  <entry>
    <title>ES6新语法</title>
    <url>/2022/12/01/es6/</url>
    <content><![CDATA[<p>相关名词介绍</p>
<ul>
<li>ECMA 欧洲计算机制造商协会 制定标准的组织</li>
<li>ECMA-262是其中(标准)的一个,即ECMAscript</li>
<li>ES6版本变动内容最多，具有里程碑意义，加入很多新语法特性，编程更加简单高效</li>
<li>ECMA-262只是纸面标准，实践当中需要每个浏览器厂商对标准进行实现，因此有兼容性的问题</li>
</ul>
<h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><ul>
<li>变量不能重复声明(var可以)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">2</span><span class="comment">//出错</span></span><br></pre></td></tr></table></figure></li>
<li>块级作用域 只在代码块有效</li>
<li>不存在变量提升<ul>
<li>变量提升：变量可以在声明之前进行初始化和使用。</li>
<li>只会提升声明，不会提升其初始化</li>
</ul>
</li>
<li>不影响作用域链</li>
<li>经典案例:循环绑定事件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;items.<span class="property">length</span>;i++)&#123;</span><br><span class="line">  items[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    items[i].<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span><span class="comment">//绑定完事件后i=3,当点击触发click事件时该语句作用域内找不到i,向上级找，在全局window中找到了i，但此时i是3，出错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决方法：1.var 改成let,2.this.style.background</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ul>
<li>一定要赋初始值</li>
<li>一般常量名是用大写</li>
<li>常量值不能修改</li>
<li>块级作用域</li>
<li>对于数组和对象的元素修改，不算做对常量的修改(常量指向的引用地址没有改变)</li>
</ul>
<h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><ul>
<li>用同步的方法写异步代码</li>
<li>async函数永远返回一个promise,async/await是基于Promise的语法糖<br>js是单线程编程语言(界面逻辑，网络请求，数据处理等都运行在一个进程) ：<ul>
<li>无需考虑线程同步或资源竞争问题</li>
<li>从源头上避免了线程之间的频繁切换，降低了线程自身的开销</li>
</ul>
</li>
</ul>
<p>js两种实现异步的方式</p>
<ul>
<li>回调函数 会产生如下图示的回调地狱<br><img src="/2022/12/01/es6/%E5%9B%9E%E8%B0%83%E5%9C%B0%E7%8B%B1.png"></li>
<li>Promise应运而生(fetch是js中一个使用了Promise的API)(承诺这个请求会在未来某个时刻返回数据)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://...&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>)=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(json))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>)=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(error))<span class="comment">//如果之前任一个then出现错误，那么catch会被触发，后面的then将不会执行</span></span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;&#125;)<span class="comment">//执行清理工作</span></span><br></pre></td></tr></table></figure>
promise的链式调用避免了代码的层层嵌套，提升了可读性<br>async/await es8/ECMA17引入,基于promise之上的一个语法糖，让异步操作更加简洁</li>
</ul>
]]></content>
      <tags>
        <tag>js ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JS闭包</title>
    <url>/2022/12/01/js%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul>
<li>如何产生闭包<br>当一个嵌套的内部子函数引用了嵌套的外部父函数的变量(函数)时，就产生了闭包</li>
<li>闭包到底是什么<br>包含被引用变量(函数)的对象(闭包存在于嵌套的内部函数中)</li>
<li>产生闭包的条件 函数嵌套+内部函数引用了外部函数的数据(变量/函数)+执行内部函数定义(可以不调用内部函数)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="number">2</span><span class="comment">//调用fn1执行到此处时已经产生了闭包(函数提升) 对应此处的执行上下文如下图</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;<span class="comment">//如果采用var fn2 = function()的方式定义函数，则只有在执行到这里时才会产生闭包，var a=2那里函数对象还没创建呢，是undefined,也就不存在闭包了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>
<img src="/2022/12/01/js%E9%AB%98%E7%BA%A7/closure.png"><span id="more"></span>
<h3 id="常见的闭包"><a href="#常见的闭包" class="headerlink" title="常见的闭包"></a>常见的闭包</h3></li>
<li>将函数作为另一个函数的返回值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="number">2</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    a++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f=<span class="title function_">fn1</span>()<span class="comment">//正常情况下a作为函数局部变量fn1调用结束就死亡，但是由于闭包没有死</span></span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//3</span></span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//4  只产生了一个内部函数对象(执行外部函数的时候才会产生内部函数对象,跟内部函数执行几次无关)，因此只有一个闭包</span></span><br><span class="line">f=<span class="literal">null</span><span class="comment">//闭包死亡(包含闭包的函数对象成为垃圾对象)</span></span><br></pre></td></tr></table></figure></li>
<li>将函数作为实参传递给另一个函数调用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showDelay</span>(<span class="params">msg,time</span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(msg)</span><br><span class="line">  &#125;,time)<span class="comment">//回调函数是内部函数，showDelay是外部函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showDelay</span>(<span class="string">&quot;xiaoming&quot;</span>,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3></li>
<li>使得内部函数的变量在函数执行完后，仍然存活在内存中(延长了局部变量的生命周期)</li>
<li>使函数外部可以操作(读写)到函数内部的数据(变量/函数)</li>
</ul>
<p>作用域作用：隔离变量(外部看不到内部变量，但内部可以看到外部(作用域链))</p>
<h3 id="闭包的生命周期"><a href="#闭包的生命周期" class="headerlink" title="闭包的生命周期"></a>闭包的生命周期</h3><ul>
<li>产生：在嵌套的内部函数定义执行完就产生了</li>
<li>死亡：在嵌套的内部函数成为垃圾对象时</li>
</ul>
<p>数据放到对象中不是私有的，对象的属性是直接可见的，而函数可以产生块级作用域，产生私有变量(对象不行)</p>
<h3 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h3><ul>
<li>定义JS模块<ul>
<li>具有特定功能的JS文件</li>
<li>将所有的数据和功能封装在一个函数内部(私有的)</li>
<li>只向外暴露一个包含n个方法的对象或者函数</li>
<li>模块使用者只需要通过模块暴露的对象调用方法实现相应功能</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;module1.js&gt;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">module1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> data=<span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>)&#123;</span><br><span class="line">    data++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">lag</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">decrease</span>(<span class="params"></span>)&#123;</span><br><span class="line">    data--</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">increase</span>:increase,</span><br><span class="line">    <span class="attr">decrease</span>:decrease</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test1.js</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title function_">module1</span>()</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">increase</span>()</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">decrease</span>()</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;module2.js&gt;</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span></span>)&#123;<span class="comment">//匿名函数</span></span><br><span class="line">  <span class="keyword">var</span> data=<span class="number">1</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>)&#123;</span><br><span class="line">    data++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">lag</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">decrease</span>(<span class="params"></span>)&#123;</span><br><span class="line">    data--</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">module2</span> = &#123;</span><br><span class="line">    <span class="attr">increase</span>:increase,</span><br><span class="line">    <span class="attr">decrease</span>:decrease</span><br><span class="line">  &#125;<span class="comment">//不传的话由于作用域链可以找到window</span></span><br><span class="line">&#125;)(<span class="variable language_">window</span>)<span class="comment">//window可传可不传(但是为了代码压缩的方便加上(若不加代码压缩将window替换成字母则w.module不会加到全局window上))</span></span><br><span class="line"><span class="comment">//test2.js</span></span><br><span class="line">module2.<span class="title function_">increase</span>()</span><br><span class="line">module2.<span class="title function_">decrease</span>()</span><br></pre></td></tr></table></figure>
<p>第一种方式需要先执行函数才能调用，第二种方式直接引入js文件后就全局可见</p>
]]></content>
      <tags>
        <tag>JS 闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>summer holiday</title>
    <url>/2022/07/11/summer-holiday/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>珍视自己的每一步脚印，勤于记录，乐于重温，敢于自嘲，善于修正，让人生的前前后后能够互相灌溉，互相滋润。 –余秋雨《收藏昨天》</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>



<p>我需要记录，我发现我的记忆真的留不住很多重要的东西，那些曾经让我内心感触的人，那些曾经让我潸然泪下的故事，那些曾经我想接触了解学习的知识，当我现在洗完澡心无杂念的坐在电脑前，我努力回想我的过去，我发现我不是一个喜欢记录的人，我似乎一直在向前走，一直走，从未停下来过，可能是我的过去所受的教育让我愧于停滞不前，让我无法真切地享受闲暇时光，所以我需要记录，需要去收藏昨天。</p>
<p>偶尔停下来歇歇，记录经历的种种，或许才能更好的领略自己所走过的风景，然后，在某个风和日丽的下午，或者夜深人静的夜晚，翻看记录的博客，仿佛穿越到了过去，时光倒流，那天的人和事又映入眼帘，才发现自己原来已经走了很远，自己的人生不再是记忆中的苍白。</p>
<p>岁月如刀，我似琴萝，记录是一剂良药，治愈了岁月这把刀所带来的伤害。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>reactProject</title>
    <url>/2022/11/29/react-project/</url>
    <content><![CDATA[<p>组件开发+React hooks(函数式组件赋予状态)+React Router+Redux+Antd==&gt;后台系统开发</p>
<h3 id="接口跨域问题"><a href="#接口跨域问题" class="headerlink" title="接口跨域问题"></a><strong>接口跨域问题</strong></h3><p>不支持跨域请求 只要协议，域名，端口号任意一项不同都存在跨域的问题，本身就是浏览器的问题</p>
<p>解决方案</p>
<ul>
<li>CORS(主流)(cross-origin resource sharing)由一系列HTTP响应头组成，这些HTTP响应头决定了浏览器是否阻止前端JS代码跨域获取资源(默认情况下浏览器的同源安全策略会阻止网页跨域获取资源，但如果<strong>接口服务器</strong>配置了CORS相关的响应头，就可以解除浏览器端的跨域访问限制)<ul>
<li>注意事项：CORS主要在服务器端进行配置，客户端浏览器无需配置，即可请求开启了CORS的接口</li>
<li>CORS在浏览器中有兼容性，只有支持XMLHttpRequest Level2的浏览器才能正常访问开启了CORS的服务器接口</li>
<li>CORS响应头部<ul>
<li>Access-Control-Allow-Origin允许哪个域名来访问服务器的资源</li>
<li>Access-Control-Allow-Headers对客户端额外的请求头进行声明</li>
<li>Access-Control-Allow-Methods默认支持GET POST HEAD请求<br><img src="/2022/11/29/react-project/CORS.png"></li>
</ul>
</li>
</ul>
</li>
<li>JSONP(只支持get请求)<ul>
<li>浏览器通过 script 标签的src属性，请求服务器数据，同时服务器返回一个函数的调用，这种请求方式称为JSONP<ul>
<li>得到函数名称</li>
<li>定义发送到客户端的数据对象</li>
<li>拼接出一个函数的调用   </li>
<li>把拼接的字符串响应给客户端</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>项目解决方案：下载http-proxy-middleware 在src目录下建立setupProxy.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">app</span>) &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>,<span class="comment">//路径</span></span><br><span class="line">    <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;https://i.maoyan.com&#x27;</span>,<span class="comment">//请求的服务器地址</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="路由架构"><a href="#路由架构" class="headerlink" title="路由架构"></a><strong>路由架构</strong></h3><p><img src="/2022/11/29/react-project/router_outline.png"></p>
<p><strong>接口</strong>使用json-server(已经在server端配置了CORS响应头)模拟</p>
<ul>
<li><p>支持get post put(替换对应id的数据) patch(局部更新对应id的数据) delete</p>
</li>
<li><p>删除时会删除关联的数据(删除文章数据时对应的评论也会删除 前提：两个表通过id连接)</p>
</li>
<li><p>_embed _expand 实现表关联(向下关联和向上关联)</p>
</li>
</ul>
<h3 id="组件化编码"><a href="#组件化编码" class="headerlink" title="组件化编码"></a><strong>组件化编码</strong></h3><ul>
<li>受控组件：外部状态变化，内部也能受到影响</li>
<li>非受控组件：外部状态变化，只有在第一次受到影响，之后再也不受影响了<br>（antd中defaultSelectKeys根据路由路径变化，当重定向时只有第一次”/“会影响，但没有匹配上key因此没有按钮被选中，之后重定向到”/home”之后也不会再去匹配了 解决；改为selectKeys(default是非受控组件)</li>
</ul>
<h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a><strong>权限控制</strong></h3><p><img src="/2022/11/29/react-project/right_control.png"></p>
<h3 id="组件拆分"><a href="#组件拆分" class="headerlink" title="组件拆分"></a><strong>组件拆分</strong></h3><p>UserList组件展示用户信息，其中有个添加用户的表单，为了复用和结构简化，将其单独拆分为组件UserForm,通过props使得父组件给子组件传递roleList和regionList数据(下拉菜单数据，通过和后端交互获得)，难点在于收集数据，表单筐里的数据可以通过ref获取，这就需要在UserForm的Form组件中添加ref属性，但是父组件怎么拿到呢(需要在Modal中的onOk方法中使用(验证和上传))<br>解决方法：将UserForm这个普通函数式组件传入forwardRef()函数中，该函数会给函数式组件传递两个参数props和ref,把ref绑定到UserForm中的Form中，而这个ref是父组件传递过来的<br>Form中的ref就传递给父组件了，父组件就可以通过使用ref传来的数据进行验证和数据添加</p>
<h3 id="同步异步问题"><a href="#同步异步问题" class="headerlink" title="同步异步问题"></a><strong>同步异步问题</strong></h3><p>react中状态的更新并不是同步的，有的时候需要同步时需要将</p>
<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><ul>
<li>折叠菜单</li>
<li>loding框组件，在请求的过程中显示，之前和之后不显示，请求之前和请求之后的判断：axios拦截，状态放到redux中管理</li>
</ul>
<p>将公共状态映射为自己的属性 </p>
<p>redux管理的状态存在内存中，刷新页面之后状态从0开始，如何让redux持久存储在系统中？<br>*redux-persist  让redux的部分状态(自己可以指定黑名单)持久化存储在localStorage中</p>
<p>dev-Tools 观看Redux中的状态信息</p>
<h3 id="自定义hooks"><a href="#自定义hooks" class="headerlink" title="自定义hooks"></a>自定义hooks</h3><p>后台系统的复杂性</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a><strong>References</strong></h3><ul>
<li><a href="https://create-react-app.dev/docs/proxying-api-requests-in-development">https://create-react-app.dev/docs/proxying-api-requests-in-development</a></li>
</ul>
]]></content>
      <tags>
        <tag>web react</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式布局</title>
    <url>/2022/12/05/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>响应式布局是同一页面在不同的屏幕上有不同的布局，即只需要一套代码使页面适应不同的屏幕</p>
]]></content>
  </entry>
  <entry>
    <title>计算机图形学</title>
    <url>/2022/12/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/</url>
    <content><![CDATA[<p>着色不考虑其他物体的存在，只考虑自己，因此没有阴影(局部性)</p>
<p>凹凸贴图和位移贴图</p>
<h4 id="Blin-Phong模型"><a href="#Blin-Phong模型" class="headerlink" title="Blin-Phong模型"></a>Blin-Phong模型</h4><p>很经验的模型但是有一定的物理道理<br>所有向量均为单位向量，因为只需要夹角参数<br>Blinn-Phong对Phong的改进：使用半程向量h=bisector(v,1)和n的夹角代替R和v的夹角(反射方向计算量比较大，而半程向量很好算)<br>高光$k_d$可以定义为白色<br>环境光和l,v,n均无关，其实是一个常数，就是某一种特定的颜色(实际上不是这回事，精确计算需要全局光照的知识)(其实一个点凹下去的话环境光应该暗一些，而不是和其他点都一样)</p>
<h4 id="shading-frequency"><a href="#shading-frequency" class="headerlink" title="shading frequency"></a>shading frequency</h4><ul>
<li>falt shading 逐三角形</li>
<li>Gouraud shading 逐顶点</li>
<li>Phong 逐像素</li>
</ul>
<p>给定顶点法向(平均或者加权平均(和三角形面积加权)),如何插值中间的法线呢<br>*重心坐标</p>
<p>图形管线(实时渲染管线)<br>从三位场景到最后渲染出一副二维的图的一个基本操作，集成在显卡中<br>其中顶点和像素如何着色是可编程的(顶点着色还是像素着色，以及如何着色 )</p>
<p>shader programs</p>
<h4 id="纹理映射"><a href="#纹理映射" class="headerlink" title="纹理映射"></a>纹理映射</h4><p>三角形的每个点对应木头纹理上面的每个点<br>定义任何一个点的属性<br>三维物体表面其实是二维的，因此可以和一张图有一一对应关系<br>物体表面一点和纹理上一点的对应关系<br>怎么把空间上的一个三角形映射到纹理上，我们不管，我们就认为已经有了这么一个映射关系，三角形上的任何一个顶点已经规定好了它在纹理上的坐标<br>需要纹理上的坐标，因此需要定义纹理上的坐标系，这个坐标系用uv来表示，都认为u在[0,1]，v也在[0,1]，方便处理，不管分辨率和长宽比<br>三角形每个顶点都对应一个uv,这就是纹理映射，怎么知道的，假设已经知道了<br>一个场景可能需要很多个纹理，像贴瓷砖一样，这就涉及到纹理之间的裂缝问题<br>纹理的无缝衔接的合成</p>
<p>知道了三角形三个顶点对应的纹理坐标uv，如何知道三角形内部三个顶点对应的纹理坐标uv</p>
<p>纹理定义着色时候需要的各个不同点的属性，我不希望着色的时候每个顶点以一种相同的方式来着色，然后用纹理的方式改变一些逐点的属性</p>
<p>如何定义不同的材质或者表面，与光线如何作用，我们就会得到一种怎样的看上去的外观，光线与材质如何作用？</p>
<p>Mipmap只能做近似的正方形的范围查询</p>
<h4 id="利用重心坐标进行插值"><a href="#利用重心坐标进行插值" class="headerlink" title="利用重心坐标进行插值"></a>利用重心坐标进行插值</h4><p>重心坐标在投影操作下会发生变化，因此三维空间的属性建议在三维空间中做插值，然后再将值对应在二维结果上</p>
]]></content>
  </entry>
  <entry>
    <title>express</title>
    <url>/2023/03/17/express/</url>
    <content><![CDATA[<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul>
<li>使用mysql模块操作MySQL数据库 npm i mysql</li>
<li>使用docker run -itd –name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql在docker中创建mysql容器</li>
<li>使用navicat连接数据库(localhost root 123456 3306(尽量用3306端口))<ul>
<li>出错1：ER_ACCESS_DENIED_ERROR: Access denied for user ‘root‘@’172.17.0.1’ (using password: YES) <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;172.17.0.1&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;172.17.0.1&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges; </span><br><span class="line">mysql<span class="operator">&gt;</span> exit</span><br><span class="line">参考：https:<span class="operator">/</span><span class="operator">/</span>medium.com<span class="operator">/</span>tech<span class="operator">-</span>learn<span class="operator">-</span>share<span class="operator">/</span>docker<span class="operator">-</span>mysql<span class="operator">-</span>access<span class="operator">-</span>denied<span class="operator">-</span><span class="keyword">for</span><span class="operator">-</span><span class="keyword">user</span><span class="number">-172</span><span class="number">-17</span><span class="number">-0</span><span class="number">-1</span><span class="operator">-</span><span class="keyword">using</span><span class="operator">-</span>password<span class="operator">-</span>yes<span class="operator">-</span>c5eadad582d3</span><br></pre></td></tr></table></figure></li>
<li>出错2：ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line">参考：https:<span class="operator">/</span><span class="operator">/</span>stackoverflow.com<span class="operator">/</span>questions<span class="operator">/</span><span class="number">50093144</span><span class="operator">/</span>mysql<span class="number">-8</span><span class="number">-0</span><span class="operator">-</span>client<span class="operator">-</span>does<span class="operator">-</span><span class="keyword">not</span><span class="operator">-</span>support<span class="operator">-</span>authentication<span class="operator">-</span>protocol<span class="operator">-</span>requested<span class="operator">-</span><span class="keyword">by</span><span class="operator">-</span>server</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>使用delete语句会把真正的数据从表中删除，为了保险起见，推荐使用标记删除的形式，设置status状态字段，标记该数据是否被删除(1表示删除)–&gt;转化为update</li>
</ul>
<h4 id="两种web开发模式"><a href="#两种web开发模式" class="headerlink" title="两种web开发模式"></a>两种web开发模式</h4><ul>
<li>服务端渲染：服务器发送给客户端html页面，是服务器通过字符串的拼接动态生成的，因此客户端不需要使用Ajax这样的技术额外请求页面的数据</li>
<li>前后端分离：依赖于Ajax技术的广泛使用，后端只负责提供API接口，前端使用Ajax调用接口</li>
<li>如何选择？<ul>
<li>企业级网站：主要功能是展示而没有复杂交互，需要良好的SEO，使用服务端渲染</li>
<li>后台管理：交互性比较强，不需要考虑SEO，前后端分离 (可以利用vue，react提供的SSR技术解决SEO问题)  </li>
<li>有时候为了同时兼顾首页的加载速度和前后端分离的开发效率，采用首屏服务端渲染+其他页面前后端分离开发模式<h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4></li>
</ul>
</li>
<li>服务端推荐采用Session认证机制 前后端分离推荐使用JWT认证机制<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4></li>
<li>存储在用户浏览器中一段不超过4KB的字符串，不同域名下的Cookie各自独立，每当客户端发送请求时，会<strong>自动</strong>把当前域名下所有<strong>未过期</strong>的Cookie一同发送到服务器 (自动发送 域名独立 过期时限 4KB限制)</li>
<li>客户端第一次请求服务器的时候，服务器通过响应头的形式向客户端发送一个身份认证的Cookie，客户端会自动保存到浏览器中；随后当客户端浏览器每次请求服务器时，浏览器自动将身份认证相关的Cookie通过请求头的形式发送给服务器，服务器即可验证客户端身份</li>
<li>Cookie不具有安全性(用户可以伪造Cookie)<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4></li>
</ul>
<h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>本质上是一个function处理函数，形参列表中必须包含next参数，next函数是实现多个中间件连续调用的关键，把流转关系转交给下一个中间件或路由(路由是最终处理环节)</p>
<ul>
<li>作用：多个中间件之间，共享同一份req和res，因此可以在上游中间件中统一为req和res对象添加自定义的属性或方法，供下游的中间件或路由进行使用</li>
<li>全局生效中间件：客户端发送的任何请求到达服务器后都会触发的中间件；<ul>
<li>方式：调用app.use(中间件函数)</li>
</ul>
</li>
<li>定义多个全局中间价：使用app.use()连续定义多个全局中间件，客户端请求到达服务器之后，会按照中间件定义的先后顺序依次调用<br>docker+express搭建后端并发布</li>
<li>局部生效中间件：不使用app.use()<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mw1 = <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是中间件函数&quot;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,[mw1,mw2],<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)<span class="comment">//mw只会影响当前路由</span></span><br></pre></td></tr></table></figure></li>
<li>注意事项<ul>
<li>一定要在路由之前注册中间件</li>
</ul>
</li>
<li>分类<ul>
<li>应用级别 绑定到app上</li>
<li>路由级别 绑定到router上</li>
<li>错误级别 必须4个形参(err,req,res,next) 必须注册在所有路由之后</li>
<li>Express内置  express.static  .json  .urlencoded</li>
<li>第三方</li>
</ul>
</li>
</ul>
<p>默认情况下，如果不配置解析表单数据的中间件，则req.body默认等于undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())<span class="comment">//解析raw json格式数据 否则req.body undefined</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))<span class="comment">//解析urlecoded格式数据，否则req.body为空对象</span></span><br></pre></td></tr></table></figure>
<ul>
<li>自定义中间件</li>
</ul>
<h4 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h4><ul>
<li>包的语义化版本规范：大版本 功能版本 Bug修复版本</li>
<li>npm uninsall 指定包名  开发依赖：-D/–save-dev(devDependencies/开发依赖包只用于开发，dependencies/核心依赖包开发和上线都能用到)</li>
</ul>
<p>references</p>
<p><a href="http://escook.cn:8088/">http://escook.cn:8088/</a></p>
]]></content>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>httpServer</title>
    <url>/2023/03/17/httpServer/</url>
    <content><![CDATA[<blockquote>
<p>http协议是TCP协议的典型应用，是浏览器与服务器交流的主要方式，服务器会监听80端口，等待客户端连接</p>
</blockquote>
<p>本blog在创建socket客户端和服务端的基础上，采用python socket和多线程构造一个简易的tinyHTTP,可以通过多线程并发支持多客户端请求，同时对客户端进行响应</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由socket服务端改造为httpServer，</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理http客户端请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_http_client</span>(<span class="params">c, addr</span>):</span><br><span class="line">  <span class="built_in">print</span>(addr, <span class="string">&quot;connected.&quot;</span>)</span><br><span class="line">  WEBROOT = os.path.dirname(__file__)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;WEBROOT&quot;</span>,WEBROOT)</span><br><span class="line">  <span class="keyword">with</span> c:</span><br><span class="line">    request = c.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Parse HTTP headers</span></span><br><span class="line">    headers = request.split(<span class="string">b&quot;\r\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(headers)</span><br><span class="line">    file = headers[<span class="number">0</span>].split()[<span class="number">1</span>].decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;file&quot;</span>,file)</span><br><span class="line">    <span class="comment"># Load file content</span></span><br><span class="line">    <span class="keyword">if</span> file == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">      file = <span class="string">&quot;index.html&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">with</span> <span class="built_in">open</span>(WEBROOT + file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">      response = <span class="string">b&quot;HTTP/1.0 200 OK\r\n\r\n&quot;</span> + content</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">      response = <span class="string">b&quot;HTTP/1.0 404 NOT FOUND\r\n\r\nFile not found!&quot;</span></span><br><span class="line">    <span class="comment"># Send HTTP response</span></span><br><span class="line">    c.sendall(response)</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理socket客户端请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_client</span>(<span class="params">c,addr</span>):</span><br><span class="line">  <span class="built_in">print</span>(addr,<span class="string">&quot;connected.&quot;</span>)</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = c.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    c.sendall(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="keyword">as</span> s:</span><br><span class="line">  s.bind((<span class="string">&quot;0.0.0.0&quot;</span>,<span class="number">1234</span>))</span><br><span class="line">  s.listen()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    c, addr = s.accept()</span><br><span class="line">    t = threading.Thread(target=handle_http_client, args=(c,addr))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># socket客户端 这里未实现http客户端(直接用浏览器代替)</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.socket(socket.AF_INET,socket.SOCK_STREAM) <span class="keyword">as</span> s:</span><br><span class="line">  s.connect((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1234</span>))</span><br><span class="line">  s.sendall(<span class="string">b&quot;Hello,Xiaoming!&quot;</span>)</span><br><span class="line">  data = s.recv(<span class="number">1024</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>,<span class="built_in">repr</span>(data))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>http socket</tag>
      </tags>
  </entry>
  <entry>
    <title>promise</title>
    <url>/2023/03/14/promise/</url>
    <content><![CDATA[<h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><ul>
<li>fs文件操作</li>
<li>数据库操作</li>
<li>AJAX</li>
<li>定时器<br>旧方案单纯回调函数形式处理</li>
</ul>
<h3 id="为什么要用Promise"><a href="#为什么要用Promise" class="headerlink" title="为什么要用Promise"></a>为什么要用Promise</h3><ul>
<li>支持链式调用，解决回调地狱问题</li>
<li>指定回调函数的方式更加灵活<ul>
<li>旧的：必须在启动异步任务前指定</li>
<li>promise: 启动异步任务 =&gt; 返回promise对象 =&gt; 给promise对象绑定回调函数(甚至可以在异步任务结束之后指定/多个)</li>
</ul>
</li>
</ul>
<p>针对跨域<br>http-proxy-middleware在客户端配置<br>cors在服务端配置</p>
<h3 id="Promise的状态"><a href="#Promise的状态" class="headerlink" title="Promise的状态"></a>Promise的状态</h3><p>实例对象中的一个属性 【PromiseState】</p>
<ul>
<li>pending 未决定的</li>
<li>resolved/fullfilled 成功</li>
<li>rejected 失败</li>
<li>Promise状态改变：只有两种，且一个promise对象只能改变一次</li>
</ul>
<h3 id="Promise对象的值"><a href="#Promise对象的值" class="headerlink" title="Promise对象的值"></a>Promise对象的值</h3><p>实例对象的另一个属性 【PromiseResult】<br>保存的是异步任务【成功/失败】的结果 </p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Promise.prototype.then((value)=&gt;&#123;&#125;,(reason)=&gt;&#123;&#125;)</span><br><span class="line">Promise.prototype.catch((reason)=&gt;&#123;&#125;)//是上面第二个函数对应的语法糖</span><br><span class="line">Promise.resolve();</span><br><span class="line">//如果传入的参数为非promise类型的对象，则返回结果为成功promise对象</span><br><span class="line">//如果传入参数是pr omise对象，则参数的结果决定了resolve的结果</span><br><span class="line">Promise.reject(reason);//返回一个失败的promise对象，值是传入的值(即使他是一个promise)</span><br><span class="line">Promise.all(promises) //参数:n个promise的数组 返回一个新的promise(只有所有的promise都成功才成功，只要一个失败则直接失败，成功结果是每个promise成功结果组成的一个数组，失败结果是数组中失败的那个promise对应的结果)</span><br><span class="line">Promise.race(promises) //参数:n个promise的数组 返回一个新的promise(第一个完成的promise的结果状态就是最终的结果状态)</span><br></pre></td></tr></table></figure>
<h3 id="几个关键问题"><a href="#几个关键问题" class="headerlink" title="几个关键问题"></a>几个关键问题</h3><ol>
<li>如何改变promise的状态</li>
</ol>
<ul>
<li>resolve(value)</li>
<li>reject(reason)</li>
<li>throw Error抛出异常</li>
</ul>
<ol start="2">
<li>一个promise指定多个成功/失败回调函数，则都会调用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const p = new Promise((resolve,rejected)=&gt;&#123;</span><br><span class="line">  resolve(&#x27;ok&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(value=&gt;console.log(value))</span><br><span class="line">p.then(value=&gt;alert(value))</span><br></pre></td></tr></table></figure></li>
<li>改变promise状态和指定回调函数谁先谁后?</li>
<li>promise.then()返回的新promise的结果状态由什么决定？</li>
</ol>
<p>—由then()指定的回调函数执行的结果决定<br>5. promise如何串联多个操作任务<br>—通过then的链式调用串联多个同步/异步任务<br>6. promise异常穿透<br>7. 中断promise链<br>方法：在回调函数中返回一个pending状态的promise对象(状态没有改变，后续.then方法都不能执行)</p>
<h2 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写Promise</h2><h2 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h2><ul>
<li>async函数的返回值为promise对象，对象结果由async函数执行的返回值决定(和.then()的返回结果相同)</li>
<li>await右侧的表达式如果是promise对象，则await返回的是promise成功的值，如果表达式是其他值，直接将此值作为await的返回值</li>
<li>await必须写在async函数中，但async函数可以没有await;如果await的promise失败了，就会抛出异常，需要通过try…catch捕获处理</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>immutable</title>
    <url>/2023/03/09/immutable/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>react中要求老状态是不可变对象，保证老状态随时可做diff对比去用，如果把老状态直接改了，那diff老状态和新状态就没有区别了</p>
<h3 id="引入Immutable"><a href="#引入Immutable" class="headerlink" title="引入Immutable"></a>引入Immutable</h3><p>实现原理：持久化数据结构，使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免deepCopy把所有节点都复制一遍所带来的性能损耗，Immutable使用了结构共享，即如果对象树中一个节点发生变化，只修改这个节点和受他影响的父节点，其他节点则进行共享。</p>
]]></content>
  </entry>
</search>
