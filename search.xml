<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/07/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>会删除public文件夹，执行hexo g会重新生成public文件夹(即网页html),由于我的avatar放在public中的images中，执行hexo cleam之后我的logo就没了(呜呜呜)</p>
]]></content>
  </entry>
  <entry>
    <title>ES6新语法</title>
    <url>/2022/12/01/es6/</url>
    <content><![CDATA[<p>相关名词介绍</p>
<ul>
<li>ECMA 欧洲计算机制造商协会 制定标准的组织</li>
<li>ECMA-262是其中(标准)的一个,即ECMAscript</li>
<li>ES6版本变动内容最多，具有里程碑意义，加入很多新语法特性，编程更加简单高效</li>
<li>ECMA-262只是纸面标准，实践当中需要每个浏览器厂商对标准进行实现，因此有兼容性的问题</li>
</ul>
<h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><ul>
<li>变量不能重复声明(var可以)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">2</span><span class="comment">//出错</span></span><br></pre></td></tr></table></figure></li>
<li>块级作用域 只在代码块有效</li>
<li>不存在变量提升<ul>
<li>变量提升：变量可以在声明之前进行初始化和使用。</li>
<li>只会提升声明，不会提升其初始化</li>
</ul>
</li>
<li>不影响作用域链</li>
<li>经典案例:循环绑定事件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;items.<span class="property">length</span>;i++)&#123;</span><br><span class="line">  items[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    items[i].<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span><span class="comment">//绑定完事件后i=3,当点击触发click事件时该语句作用域内找不到i,向上级找，在全局window中找到了i，但此时i是3，出错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决方法：1.var 改成let,2.this.style.background</span></span><br></pre></td></tr></table></figure>
<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4></li>
<li>一定要赋初始值</li>
<li>一般常量名是用大写</li>
<li>常量值不能修改</li>
<li>块级作用域</li>
<li>对于数组和对象的元素修改，不算做对常量的修改(常量指向的引用地址没有改变)</li>
</ul>
]]></content>
      <tags>
        <tag>js ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>js闭包</title>
    <url>/2022/12/01/js%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul>
<li>如何产生闭包<br>当一个嵌套的内部子函数引用了嵌套的外部父函数的变量(函数)时，就产生了闭包</li>
<li>闭包到底是什么<br>包含被引用变量(函数)的对象(闭包存在于嵌套的内部函数中)</li>
<li>产生闭包的条件 函数嵌套+内部函数引用了外部函数的数据(变量/函数)+执行内部函数定义(可以不调用内部函数)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="number">2</span><span class="comment">//调用fn1执行到此处时已经产生了闭包(函数提升) 对应此处的执行上下文如下图</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;<span class="comment">//如果采用var fn2 = function()的方式定义函数，则只有在执行到这里时才会产生闭包，var a=2那里函数对象还没创建呢，是undefined,也就不存在闭包了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>
<img src="/2022/12/01/js%E9%AB%98%E7%BA%A7/closure.png"><br>常见的闭包</li>
<li>将函数作为另一个函数的返回值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="number">2</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    a++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f=<span class="title function_">fn1</span>()<span class="comment">//正常情况下a作为函数局部变量fn1调用结束就死亡，但是由于闭包没有死</span></span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//3</span></span><br><span class="line"><span class="title function_">f</span>()<span class="comment">//4  只产生了一个内部函数对象(执行外部函数的时候才会产生内部函数对象,跟内部函数执行几次无关)，因此只有一个闭包</span></span><br></pre></td></tr></table></figure></li>
<li>将函数作为实参传递给另一个函数调用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showDelay</span>(<span class="params">msg,time</span>)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(msg)</span><br><span class="line">  &#125;,time)<span class="comment">//回调函数是内部函数，showDelay是外部函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showDelay</span>(<span class="string">&quot;xiaoming&quot;</span>,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>js 闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>reactProject</title>
    <url>/2022/11/29/react-project/</url>
    <content><![CDATA[<p>组件开发+React hooks(函数式组件赋予状态)+React Router+Redux+Antd==&gt;后台系统开发</p>
<h3 id="接口跨域问题"><a href="#接口跨域问题" class="headerlink" title="接口跨域问题"></a><strong>接口跨域问题</strong></h3><p>不支持跨域请求 只要协议，域名，端口号任意一项不同都存在跨域的问题，本身就是浏览器的问题</p>
<p>解决方案</p>
<ul>
<li>CORS(主流)(cross-origin resource sharing)由一系列HTTP响应头组成，这些HTTP响应头决定了浏览器是否阻止前端JS代码跨域获取资源(默认情况下浏览器的同源安全策略会阻止网页跨域获取资源，但如果<strong>接口服务器</strong>配置了CORS相关的响应头，就可以解除浏览器端的跨域访问限制)<ul>
<li>注意事项：CORS主要在服务器端进行配置，客户端浏览器无需配置，即可请求开启了CORS的接口</li>
<li>CORS在浏览器中有兼容性，只有支持XMLHttpRequest Level2的浏览器才能正常访问开启了CORS的服务器接口</li>
<li>CORS响应头部<ul>
<li>Access-Control-Allow-Origin允许哪个域名来访问服务器的资源</li>
<li>Access-Control-Allow-Headers对客户端额外的请求头进行声明</li>
<li>Access-Control-Allow-Methods默认支持GET POST HEAD请求<br><img src="/2022/11/29/react-project/CORS.png"></li>
</ul>
</li>
</ul>
</li>
<li>JSONP(只支持get请求)<ul>
<li>浏览器通过 script 标签的src属性，请求服务器数据，同时服务器返回一个函数的调用，这种请求方式称为JSONP<ul>
<li>得到函数名称</li>
<li>定义发送到客户端的数据对象</li>
<li>拼接出一个函数的调用   </li>
<li>把拼接的字符串响应给客户端<span id="more"></span>
项目解决方案：下载http-proxy-middleware 在src目录下建立setupProxy.js文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">app</span>) &#123;</span><br><span class="line">  app.<span class="title function_">use</span>(</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>,<span class="comment">//路径</span></span><br><span class="line">    <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;https://i.maoyan.com&#x27;</span>,<span class="comment">//请求的服务器地址</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="路由架构"><a href="#路由架构" class="headerlink" title="路由架构"></a><strong>路由架构</strong></h3><img src="/2022/11/29/react-project/router_outline.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>接口</strong>使用json-server(已经在server端配置了CORS响应头)模拟</p>
<ul>
<li><p>支持get post put(替换对应id的数据) patch(局部更新对应id的数据) delete</p>
</li>
<li><p>删除时会删除关联的数据(删除文章数据时对应的评论也会删除 前提：两个表通过id连接)</p>
</li>
<li><p>_embed _expand 实现表关联(向下关联和向上关联)</p>
</li>
</ul>
<h3 id="组件化编码"><a href="#组件化编码" class="headerlink" title="组件化编码"></a><strong>组件化编码</strong></h3><ul>
<li>受控组件：外部状态变化，内部也能受到影响</li>
<li>非受控组件：外部状态变化，只有在第一次受到影响，之后再也不受影响了<br>（antd中defaultSelectKeys根据路由路径变化，当重定向时只有第一次”/“会影响，但没有匹配上key因此没有按钮被选中，之后重定向到”/home”之后也不会再去匹配了 解决；改为selectKeys(default是非受控组件)</li>
</ul>
<h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a><strong>权限控制</strong></h3><p><img src="/2022/11/29/react-project/right_control.png"></p>
<p>后台系统的复杂性</p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a><strong>References</strong></h3><ul>
<li><a href="https://create-react-app.dev/docs/proxying-api-requests-in-development">https://create-react-app.dev/docs/proxying-api-requests-in-development</a></li>
</ul>
]]></content>
      <tags>
        <tag>web react</tag>
      </tags>
  </entry>
  <entry>
    <title>summer holiday</title>
    <url>/2022/07/11/summer-holiday/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>珍视自己的每一步脚印，勤于记录，乐于重温，敢于自嘲，善于修正，让人生的前前后后能够互相灌溉，互相滋润。 –余秋雨《收藏昨天》</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>



<p>我需要记录，我发现我的记忆真的留不住很多重要的东西，那些曾经让我内心感触的人，那些曾经让我潸然泪下的故事，那些曾经我想接触了解学习的知识，当我现在洗完澡心无杂念的坐在电脑前，我努力回想我的过去，我发现我不是一个喜欢记录的人，我似乎一直在向前走，一直走，从未停下来过，可能是我的过去所受的教育让我愧于停滞不前，让我无法真切地享受闲暇时光，所以我需要记录，需要去收藏昨天。</p>
<p>偶尔停下来歇歇，记录经历的种种，或许才能更好的领略自己所走过的风景，然后，在某个风和日丽的下午，或者夜深人静的夜晚，翻看记录的博客，仿佛穿越到了过去，时光倒流，那天的人和事又映入眼帘，才发现自己原来已经走了很远，自己的人生不再是记忆中的苍白。</p>
<p>岁月如刀，我似琴萝，记录是一剂良药，治愈了岁月这把刀所带来的伤害。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
